/* Auto-generated by genmsg_cpp for file /home/adam/ros_workspace/surf12adamros/camera_actuator/msg/CamCmd.msg */
#ifndef CAMERA_ACTUATOR_MESSAGE_CAMCMD_H
#define CAMERA_ACTUATOR_MESSAGE_CAMCMD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace camera_actuator
{
template <class ContainerAllocator>
struct CamCmd_ {
  typedef CamCmd_<ContainerAllocator> Type;

  CamCmd_()
  : Pvalue(0)
  , Tvalue(0)
  , Zvalue(0)
  {
  }

  CamCmd_(const ContainerAllocator& _alloc)
  : Pvalue(0)
  , Tvalue(0)
  , Zvalue(0)
  {
  }

  typedef int64_t _Pvalue_type;
  int64_t Pvalue;

  typedef int64_t _Tvalue_type;
  int64_t Tvalue;

  typedef int64_t _Zvalue_type;
  int64_t Zvalue;


  typedef boost::shared_ptr< ::camera_actuator::CamCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_actuator::CamCmd_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CamCmd
typedef  ::camera_actuator::CamCmd_<std::allocator<void> > CamCmd;

typedef boost::shared_ptr< ::camera_actuator::CamCmd> CamCmdPtr;
typedef boost::shared_ptr< ::camera_actuator::CamCmd const> CamCmdConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::camera_actuator::CamCmd_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::camera_actuator::CamCmd_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace camera_actuator

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::camera_actuator::CamCmd_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::camera_actuator::CamCmd_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::camera_actuator::CamCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "46895988c20b47142a93febd21dd1e8a";
  }

  static const char* value(const  ::camera_actuator::CamCmd_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x46895988c20b4714ULL;
  static const uint64_t static_value2 = 0x2a93febd21dd1e8aULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_actuator::CamCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "camera_actuator/CamCmd";
  }

  static const char* value(const  ::camera_actuator::CamCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::camera_actuator::CamCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 Pvalue\n\
int64 Tvalue\n\
int64 Zvalue\n\
\n\
";
  }

  static const char* value(const  ::camera_actuator::CamCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::camera_actuator::CamCmd_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::camera_actuator::CamCmd_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Pvalue);
    stream.next(m.Tvalue);
    stream.next(m.Zvalue);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CamCmd_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_actuator::CamCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::camera_actuator::CamCmd_<ContainerAllocator> & v) 
  {
    s << indent << "Pvalue: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Pvalue);
    s << indent << "Tvalue: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Tvalue);
    s << indent << "Zvalue: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Zvalue);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CAMERA_ACTUATOR_MESSAGE_CAMCMD_H

